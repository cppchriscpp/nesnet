;
; File generated by cc65 v 2.13.3
;
	.fopt		compiler,"cc65 v 2.13.3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_spr
	.import		_music_play
	.import		_music_pause
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_delay
	.export		_nesnet_buffer
	.import		_http_get
	.import		_nesnet_check_connected
	.import		_http_request_complete
	.import		_nesnet_do_cycle
	.import		_http_response_code
	.import		_nesnet_pad_poll
	.export		_currentPadState
	.export		_i
	.export		_currentMessage
	.export		_put_str
	.export		_write_screen_buffer
	.export		_main

.segment	"RODATA"

L0001:
	.byte	$48,$65,$6C,$6C,$6F,$20,$77,$6F,$72,$6C,$64,$21,$00,$57,$61,$69
	.byte	$74,$69,$6E,$67,$20,$66,$6F,$72,$20,$4E,$45,$53,$4E,$65,$74,$2E
	.byte	$2E,$2E,$00,$4E,$65,$73,$6E,$65,$74,$20,$43,$6F,$6E,$6E,$65,$63
	.byte	$74,$65,$64,$21,$20,$20,$20,$20,$00,$68,$74,$74,$70,$3A,$2F,$2F
	.byte	$31,$39,$32,$2E,$31,$36,$38,$2E,$31,$2E,$32,$30,$31,$3A,$33,$30
	.byte	$30,$30,$2F,$75,$70,$64,$61,$74,$65,$00

.segment	"BSS"

_nesnet_buffer:
	.res	20,$00
_currentPadState:
	.res	1,$00
_i:
	.res	1,$00
_currentMessage:
	.res	16,$00
_showMessageA:
	.res	1,$00
_playerX:
	.res	1,$00
_playerY:
	.res	1,$00
_waitCycle:
	.res	1,$00
_playMusic:
	.res	1,$00
_chrBank:
	.res	1,$00
_statusCode:
	.res	1,$00
_screenBuffer:
	.res	20,$00

; ---------------------------------------------------------------
; void __near__ put_str (unsigned int, __near__ const unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_str: near

.segment	"CODE"

;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if(!*str) break;
;
L0008:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jeq     incsp4
;
; vram_put((*str++)-0x20);//-0x20 because ASCII code 0x20 is placed in tile 0 of the CHR
;
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0010
	inx
L0010:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L0008

.endproc

; ---------------------------------------------------------------
; void __near__ write_screen_buffer (unsigned char, unsigned char, __near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_screen_buffer: near

.segment	"CODE"

;
; screenBuffer[0] = MSB(NTADR_A(x, y)) | NT_UPD_HORZ;
;
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	lda     tmp1
	ora     #$20
	ora     #$40
	sta     _screenBuffer
;
; screenBuffer[1] = LSB(NTADR_A(x, y));
;
	ldx     #$00
	dey
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	sta     _screenBuffer+1
	lda     tmp1
	ora     #$20
;
; screenBuffer[2] = 16u;
;
	lda     #$10
	sta     _screenBuffer+2
;
; for (i = 0; data[i] != '\0'; ++i) 
;
	lda     #$00
	sta     _i
L002C:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	beq     L002D
;
; screenBuffer[i+3u] = data[i]-0x20;
;
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L00AF
	inx
	clc
L00AF:	adc     #<(_screenBuffer)
	sta     sreg
	txa
	adc     #>(_screenBuffer)
	sta     sreg+1
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	sbc     #$20
	ldy     #$00
	sta     (sreg),y
;
; for (i = 0; data[i] != '\0'; ++i) 
;
	inc     _i
	jmp     L002C
;
; screenBuffer[19] = NT_UPD_EOF;
;
L002D:	lda     #$FF
	sta     _screenBuffer+19
;
; set_vram_update(screenBuffer);
;
	lda     #<(_screenBuffer)
	ldx     #>(_screenBuffer)
	jsr     _set_vram_update
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; showMessageA = 0;
;
	lda     #$00
	sta     _showMessageA
;
; playMusic = 1;
;
	lda     #$01
	sta     _playMusic
;
; music_play(DUMMY_SONG);
;
	lda     #$00
	jsr     _music_play
;
; music_pause(playMusic);
;
	lda     _playMusic
	jsr     _music_pause
;
; pal_col(1,0x19);//set dark green color
;
	lda     #$01
	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; pal_col(17,0x19);
;
	lda     #$11
	jsr     pusha
	lda     #$19
	jsr     _pal_col
;
; put_str(NTADR_A(2,8), "Hello world!");
;
	jsr     decsp4
	lda     #$02
	tay
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     #<(L0001)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001)
	sta     (sp),y
	jsr     _put_str
;
; put_str(NTADR_A(2, 2), "Waiting for NESNet...");
;
	jsr     decsp4
	lda     #$42
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #<(L0001+13)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+13)
	sta     (sp),y
	jsr     _put_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (!nesnet_check_connected()) {
;
L0060:	jsr     _nesnet_check_connected
	tax
	bne     L0061
;
; delay(200);
;
	lda     #$C8
	jsr     _delay
;
; }
;
	jmp     L0060
;
; ppu_off();
;
L0061:	jsr     _ppu_off
;
; put_str(NTADR_A(2, 2), "Nesnet Connected!    ");
;
	jsr     decsp4
	lda     #$42
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #<(L0001+35)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+35)
	sta     (sp),y
	jsr     _put_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; playerX = 50;
;
	lda     #$32
	sta     _playerX
;
; playerY = 50;
;
	sta     _playerY
;
; waitCycle = 200;
;
	lda     #$C8
	sta     _waitCycle
;
; currentPadState = nesnet_pad_poll();
;
L0075:	jsr     _nesnet_pad_poll
	sta     _currentPadState
;
; if (currentPadState & PAD_UP) {
;
	and     #$10
	beq     L007A
;
; playerY -= 5;
;
	lda     _playerY
	sec
	sbc     #$05
;
; } else if (currentPadState & PAD_DOWN) {
;
	jmp     L00B0
L007A:	lda     _currentPadState
	and     #$20
	beq     L007F
;
; playerY += 5;
;
	lda     #$05
	clc
	adc     _playerY
L00B0:	sta     _playerY
;
; if (currentPadState & PAD_LEFT) {
;
L007F:	lda     _currentPadState
	and     #$40
	beq     L0083
;
; playerX -= 5;
;
	lda     _playerX
	sec
	sbc     #$05
;
; } else if (currentPadState & PAD_RIGHT) {
;
	jmp     L00B1
L0083:	lda     _currentPadState
	and     #$80
	beq     L0088
;
; playerX += 5;
;
	lda     #$05
	clc
	adc     _playerX
L00B1:	sta     _playerX
;
; oam_spr(playerX, playerY, 0x03, 0, SPRITE_PLAYER);
;
L0088:	jsr     decsp4
	lda     _playerX
	ldy     #$03
	sta     (sp),y
	lda     _playerY
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$10
	jsr     _oam_spr
;
; if (http_request_complete()) {
;
	jsr     _http_request_complete
	tax
	beq     L00A9
;
; if (waitCycle == REQUEST_DELAY && http_response_code() == 200) {
;
	lda     _waitCycle
	cmp     #$32
	bne     L0094
	jsr     _http_response_code
	cpx     #$00
	bne     L0094
	cmp     #$C8
	bne     L0094
;
; oam_spr(currentMessage[0], currentMessage[1], 0x20, 0, SPRITE_INTERNET);
;
	jsr     decsp4
	lda     _currentMessage
	ldy     #$03
	sta     (sp),y
	lda     _currentMessage+1
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	txa
	dey
	sta     (sp),y
	lda     #$20
	jsr     _oam_spr
;
; if (waitCycle == 0) {
;
L0094:	lda     _waitCycle
	bne     L00A1
;
; http_get(POSITION_URL, currentMessage, 8);
;
	jsr     decsp4
	lda     #<(L0001+57)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(L0001+57)
	sta     (sp),y
	lda     #<(_currentMessage)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_currentMessage)
	sta     (sp),y
	ldx     #$00
	lda     #$08
	jsr     _http_get
;
; waitCycle = REQUEST_DELAY;
;
	lda     #$32
;
; } else {
;
	jmp     L00B3
;
; waitCycle--;
;
L00A1:	lda     _waitCycle
	sec
	sbc     #$01
L00B3:	sta     _waitCycle
;
; nesnet_do_cycle();
;
L00A9:	jsr     _nesnet_do_cycle
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; }
;
	jmp     L0075

.endproc

